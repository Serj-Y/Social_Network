{"version":3,"sources":["Profile/ProfileInfo/ProfileInfo.module.scss","Common/Components/hoc/withAuthRedirect.tsx","Common/Components/styles/button/InputBtn/InputBtn.module.scss","Profile/MyPosts/MyPosts.module.scss","Profile/MyPosts/Posts/Post.module.scss","Profile/MyPosts/AddPostForm.module.scss","Profile/Profile.module.scss","Profile/ProfileInfo/ProfileData/ProfileStatusWithHook.tsx","Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","Profile/ProfileInfo/ProfileData/ProfileData.tsx","Common/Components/styles/button/InputBtn/InputBtn.tsx","Profile/ProfileInfo/ProfileInfo.tsx","Common/Components/styles/button/HeartBtn/HeartSolidBtn.tsx","Common/Components/styles/button/HeartBtn/HeartRegular.tsx","Profile/MyPosts/Posts/Post.tsx","Profile/MyPosts/AddPostForm.tsx","Profile/MyPosts/MyPosts.tsx","Profile/MyPosts/MyPostsContainer.tsx","Profile/Profile.tsx","Profile/ProfileContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","React","createElement","Redirect","to","ProfileStatusWidthHook","memo","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","className","styles","onClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileDataReduxForm","reduxForm","form","_ref","profile","handleSubmit","error","onSubmit","editModeForm","CreateFields","Input","Textarea","type","Object","keys","contacts","map","key","Btn","ButtonText","styleForm","formSummaryError","Contact","_ref2","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","profileData","itemProfileData","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Click","InputBtn","OnChange","container","id","input","htmlFor","inputBtn","FontAwesomeIcon","icon","faUpload","ProfileInfo","Preloader","descriptionBlock","profilePhoto","alt","src","photos","large","userPhotoDefault","_e$target$files","target","files","length","savePhoto","initialValues","formData","saveProfile","then","SolidHeart","faHeart","RegularHeart","MemoPost","useSelector","_state$profilePage$pr","profilePage","small","likesCount","count","setCount","like","setLike","item","postPhoto","DefaultPhoto","postMessage","message","likeButton","prevCount","prevIsLike","maxLength","maxLengthCreator","minLength","minLengthCreator","AddPostFormRedux","addPostForm","required","submitBtn","MyPosts","postsElements","posts","Post","postsBlock","values","addPost","newPostText","MyPostContainer","actions","addPostActionCreator","Profile","dispatch","useDispatch","file","MyPostsContainer","ProfileContainer","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","Number","this","match","params","AuthUserId","history","push","profileContent","getStatus","refreshProfile","prevProps","assign","setUserProfile","compose","withRouter"],"mappings":"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","file":"static/js/3.aa7b6953.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3fSBM\",\"editModeForm\":\"ProfileInfo_editModeForm__1z4QL\",\"profilePhoto\":\"ProfileInfo_profilePhoto__3eh-I\",\"status\":\"ProfileInfo_status__QKsJY\",\"profileData\":\"ProfileInfo_profileData__3Q8rD\",\"itemProfileData\":\"ProfileInfo_itemProfileData__1ML2B\",\"contacts\":\"ProfileInfo_contacts__PF6Aw\"};","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../Redux/reduxStore\";\n\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n});\n\ntype PropsType = {\n    isAuth: boolean\n}\n\n\nexport const withAuthRedirect = (Component: any) => {\nconst RedirectComponent: React.FC<PropsType>  = (props) => {\n    \n            if (!props.isAuth) \n            return <Redirect to={\"/Login\"}/>\n            return <Component {...props}/>\n        \n    }\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"InputBtn_container__2vLDU\",\"input\":\"InputBtn_input__ZwYnh\",\"inputBtn\":\"InputBtn_inputBtn__1Gw6E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ozbs\",\"posts\":\"MyPosts_posts__3fakG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3sWuX\",\"postMessage\":\"Post_postMessage__2eH7H\",\"likeButton\":\"Post_likeButton__39YcJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addPostForm\":\"AddPostForm_addPostForm__3O9EN\",\"form\":\"AddPostForm_form__32Llm\",\"submitBtn\":\"AddPostForm_submitBtn__2z2l-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1HXcN\"};","\nimport React, { useEffect, useState, ChangeEvent } from \"react\";\nimport styles from \"../ProfileInfo.module.scss\"\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n\nconst ProfileStatusWidthHook: React.FC<PropsType> = React.memo(props => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div className={styles.status} > \n                   <b>Status</b>:\n                    <span \n                    onClick={activateEditMode}> \n                    {  props.status || \"Empty Status-Click To Edit\"}\n                    </span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input\n                        onChange={onStatusChange}\n                        onBlur={deactivateEditMode}\n                        autoFocus={true}\n                        value={status}\n                    />\n                </div>\n            }\n        </div>\n    )\n})\n\nexport default ProfileStatusWidthHook","import React from \"react\"\nimport styles from \"../ProfileInfo.module.scss\"\nimport { CreateFields, GetStringKeys, Input, Textarea } from \"../../../Common/Components/FormsControls/FormsControls\"\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport styleForm from \"../../../Common/Components/FormsControls/FormsControls.module.scss\"\nimport { ProfileType } from \"../../../Common/Components/Types/Types\";\nimport { Btn } from \"../../../Common/Components/styles/button/Button\";\n\ntype PropsType = {\n    profile: ProfileType\n   \n}\n\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType>= ({ profile, handleSubmit, error }) => {\n    return (\n        <form onSubmit={handleSubmit} >\n            <div className={styles.editModeForm} >\n                <b> Full Name</b>: {CreateFields<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n            </div>\n            <div className={styles.editModeForm}>\n                <b>About Me</b>: {CreateFields<ProfileTypeKeys>(\"About Me\", \"aboutMe\", [], Textarea)}\n            </div>\n            <div className={styles.editModeForm}>\n                <b> Looking for a Job?</b>:\n                {CreateFields<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\n            </div >\n            <div className={styles.editModeForm}>\n                <b>Looking a Job</b>:\n                {CreateFields<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\n            </div>\n            <div>\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                    return <div  key={key} className={styles.contacts}>\n                        <b className={styles.editModeForm} >{key}: {CreateFields(key, \"contacts.\" + key, [], Input)}</b>\n                    </div>\n                })}\n            </div>\n            <div>\n                <Btn ButtonText={\"Save\"} />\n                {error && <div className={styleForm.formSummaryError} >\n                    {error}</div>}\n            </div>\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({ form: \"edit-profile\" })(ProfileDataForm)\n\n\nexport default ProfileDataReduxForm\n\n","import React from \"react\";\nimport styles from \"../ProfileInfo.module.scss\"\nimport { ContactsObjectType, ProfileType } from \"../../../Common/Components/Types/Types\";\nimport { Btn } from \"../../../Common/Components/styles/button/Button\";\n\n\ntype PropsType = {\n    profile: ProfileType\n     isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<PropsType> = ({ profile, isOwner, goToEditMode }) => {\n    return (\n        <div className={styles.profileData} >\n            <div className={styles.itemProfileData} >\n                <b> Full Name</b>: {profile.fullName}\n            </div>\n            <div  className={styles.itemProfileData}>\n                <b>About Me</b>:   {profile.aboutMe}\n            </div>\n            <div  className={styles.itemProfileData}>\n                <b> Looking for a Job</b>: {profile.lookingForAJob ? \"Yes\" : \"No\"}\n            </div>\n            {profile.lookingForAJob &&\n            <div  className={styles.itemProfileData}>\n                <b>Looking a Job</b>: {profile.lookingForAJobDescription}\n            </div>\n}\n            <div>\n                <b>Contacts</b>: {Object\n                .keys(profile.contacts)\n                .map((key) => {\n                return <Contact\n                        key={key}\n                        contactTitle={key}\n                        contactValue={profile.contacts[key as keyof ContactsObjectType]} />})}\n            </div>\n            {isOwner &&  <div><Btn Click={goToEditMode} ButtonText={\"edit\"} /></div>}\n        </div>\n    )\n}\n\ntype ContactsPropsType = {\n    contactTitle: string \n    contactValue: string\n}\n\nconst Contact: React.FC<ContactsPropsType> = ({ contactTitle, contactValue }) => {\n    return (\n        <div className={styles.contacts}><b>{contactTitle}</b>: {contactValue} </div>\n    )\n}\n\nexport default ProfileData","import React from \"react\";\nimport styles from \"./InputBtn.module.scss\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faUpload } from \"@fortawesome/free-solid-svg-icons\";\n\n export const InputBtn =({OnChange}:any) => {\n    return (\n        <div className={styles.container}>\n            <input type=\"file\" id=\"file\" onChange={OnChange} className={styles.input} />\n            <label htmlFor=\"file\"><div className={styles.inputBtn}> Change Photo <FontAwesomeIcon  icon={faUpload}/></div></label>\n        </div>\n    )\n}\n\n\n\n","import React, { ChangeEvent } from \"react\";\nimport styles from \"./ProfileInfo.module.scss\"\nimport Preloader from \"../../Common/Components/Preloader/Preloader\";\nimport ProfileStatusWidthHook from \"./ProfileData/ProfileStatusWithHook\";\nimport userPhotoDefault from \"../../Common/assets/img/DefaultPhoto.png\"\nimport { useState } from \"react\";\nimport ProfileDataReduxForm from \"./ProfileData/ProfileDataForm\";\nimport ProfileData from \"./ProfileData/ProfileData\";\nimport { ProfileType } from \"../../Common/Components/Types/Types\";\nimport { InputBtn } from \"../../Common/Components/styles/button/InputBtn/InputBtn\";\n\n\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    isOwner: boolean\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (formData: ProfileType) => Promise<any>\n}\n\n\nconst ProfileInfo: React.FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!props.profile) {\n        return <Preloader />\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            props.savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        props.saveProfile(formData)\n            .then(() => {\n                setEditMode(false);\n            })\n    }\n\n\n    return (\n        <div className={styles.descriptionBlock}>\n\n            <div className={styles.profilePhoto} >\n\n                <img alt=\"userPhoto\" src={props.profile.photos.large || userPhotoDefault} />\n                {props.isOwner &&     <InputBtn OnChange={onMainPhotoSelected}/>}\n\n            </div>\n\n\n            {editMode\n                ? <ProfileDataReduxForm\n                    initialValues={props.profile}\n                    onSubmit={onSubmit}\n                    profile={props.profile}\n                />\n                :\n                <div>\n                        <ProfileStatusWidthHook\n                            status={props.status}\n                            updateStatus={props.updateStatus} />\n                   \n                    <ProfileData\n                        profile={props.profile}\n                        isOwner={props.isOwner}\n                        goToEditMode={() => { setEditMode(true) }}\n                    />\n                </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileInfo","import React from \"react\";\nimport { faHeart } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\n\n\n\nexport const SolidHeart =() => { return <FontAwesomeIcon icon={faHeart} /> }","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHeart } from \"@fortawesome/free-regular-svg-icons\";\n\n\n\nexport const RegularHeart =() => { return <FontAwesomeIcon icon={faHeart} /> }","import React, { useState } from \"react\";\nimport styles from \"./Post.module.scss\"\nimport { useSelector } from \"react-redux\";\nimport { AppStateType } from \"../../../Common/Components/Redux/reduxStore\";\nimport DefaultPhoto from \"../../../Common/assets/img/DefaultPhoto.png\"\nimport { SolidHeart } from \"../../../Common/Components/styles/button/HeartBtn/HeartSolidBtn\";\nimport { RegularHeart } from \"../../../Common/Components/styles/button/HeartBtn/HeartRegular\";\n\n\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\n\n\n\n\n\nconst Post: React.FC<PropsType> = (props) => {\n\n    const profilePhoto = useSelector((state: AppStateType) => state.profilePage.profile?.photos.small)\n    const [count, setCount] = useState(props.likesCount);\n    const [like, setLike] = useState(false)\n\n    // const [style, setStyle] =useState(\"\")\n\n    //     const LikerDisLiker = () => {\n    //         if (!like) {\n    //             setCount(count + 1)\n    //             setLike(true)\n    //             setStyle(styles.likeActive)\n    //         } else {\n    //             setCount(count - 1)\n    //             setLike(false)\n    //             setStyle(\"\")\n    //         }\n    //     }\n\n\n\n\n    const onChangeLikeHandler = () => {\n        setCount(prevCount => prevCount + (like ? -1 : 1));\n        setLike(prevIsLike => !prevIsLike);\n    }\n\n    return (\n        <div className={styles.item}>\n            <div className={styles.postPhoto} >\n                <img src={profilePhoto || DefaultPhoto} alt=\"Post Photo\" />\n            </div>\n            <div className={styles.postMessage}>\n                <h4>{props.message}</h4>\n                <div >\n                    <button className={styles.likeButton} onClick={() => onChangeLikeHandler()} > {count} {like ? <SolidHeart/> : <RegularHeart/> }</button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n\nconst MemoPost = React.memo(Post)\n\nexport default MemoPost","import React from \"react\";\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\nimport { GetStringKeys, Textarea } from \"../../Common/Components/FormsControls/FormsControls\";\nimport { maxLengthCreator, minLengthCreator, required } from \"../../Common/Components/Validators/Validators\";\nimport { CreateFields } from \"../../Common/Components/FormsControls/FormsControls\";\nimport { Btn } from \"../../Common/Components/styles/button/Button\";\nimport styles from \"./AddPostForm.module.scss\"\n\n\nexport const maxLength = maxLengthCreator(250);\nexport const minLength = minLengthCreator(2);\n\ntype AddPostPropsType = {};\n\nexport type AddPostFormValueType = {\n    newPostText: string;\n};\n\ntype AddPostFormValueTypeKey = GetStringKeys<AddPostFormValueType>;\n\nlet AddPostForm: React.FC<InjectedFormProps<AddPostFormValueType, AddPostPropsType> & AddPostPropsType> = (props) => {\n    return (\n        <div className={styles.addPostForm}>\n             <form className={styles.form} onSubmit={props.handleSubmit}>\n            {CreateFields<AddPostFormValueTypeKey>(\"Enter your post-message\", \"newPostText\", [required, maxLength, minLength], Textarea)}\n           <div className={styles.submitBtn}>\n              <Btn ButtonText={\"Post\"}/>\n           </div>\n        </form> \n        </div>\n            \n    );\n};\nexport const AddPostFormRedux = reduxForm<AddPostFormValueType, AddPostPropsType>({ form: \"profileAddNewPostForm\" })(AddPostForm);\n","import React from \"react\";\nimport styles from \"./MyPosts.module.scss\";\nimport Post from \"./Posts/Post\";\nimport { PostsType } from \"../../Common/Components/Types/Types\";\nimport { AddPostFormValueType, AddPostFormRedux } from \"./AddPostForm\";\n\n\nexport type MapPropsType = {\n    posts: Array<PostsType>\n}\n\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n\n    let postsElements = props.posts.map((posts: PostsType) =>\n     <Post\n        key={posts.id}\n        message={posts.message}\n        likesCount={posts.likesCount} \n        />);\n\n    let onAddPost = (values: AddPostFormValueType) => {\n        return props.addPost(values.newPostText);\n    }\n    return (\n        <div className={styles.postsBlock}>\n            <AddPostFormRedux onSubmit={onAddPost} />\n            <div className={styles.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default MyPosts","import { actions } from \"../../Common/Components/Redux/profileReducer\";\nimport MyPosts, { MapPropsType, DispatchPropsType } from \"./MyPosts\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../Common/Components/Redux/reduxStore\";\n\n\nconst MapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts,\n        \n    }\n};\nconst MyPostContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType> (MapStateToProps,{ addPost: actions.addPostActionCreator })(MyPosts)\n\nexport default MyPostContainer ","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport { ProfileType } from \"../Common/Components/Types/Types\";\nimport styles from \"./Profile.module.scss\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppStateType } from \"../Common/Components/Redux/reduxStore\";\nimport { savePhoto, updateStatus } from \"../Common/Components/Redux/profileReducer\";\n\n\n\ntype PropsType = {\n    isOwner: boolean,\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = ({ isOwner, saveProfile }) => {\n\n    const profile = useSelector((state: AppStateType) => state.profilePage.profile)\n    const status = useSelector((state: AppStateType) => state.profilePage.status)\n\n    const dispatch = useDispatch()\n\n    const UpdateStatus = (status: string) => {\n        dispatch(updateStatus(status))\n    }\n\n    const SavePhoto = (file: File) => {\n        dispatch(savePhoto(file))\n    }\n\n    return <div className={styles.Profile} >\n        <ProfileInfo\n            profile={profile}\n            status={status}\n            updateStatus={UpdateStatus}\n            savePhoto={SavePhoto}\n            isOwner={isOwner}\n            saveProfile={saveProfile}\n        />\n        <MyPostsContainer />\n    </div>\n}\nexport default Profile ","import React from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport { actions, profileContent, saveProfile, getStatus } from \"../Common/Components/Redux/profileReducer\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"redux\";\nimport { withAuthRedirect } from \"../Common/Components/hoc/withAuthRedirect\";\nimport { AppStateType } from \"../Common/Components/Redux/reduxStore\";\nimport { ProfileType } from \"../Common/Components/Types/Types\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\n\n\ntype MapDispatchPropsType = {\n    profileContent: (userId: number | null) => void\n    getStatus: (userId: number | null) => void\n    refreshProfile: (userId: number, AuthUserId: number) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\n\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\n\n\nclass ProfileContainer extends React.Component<PropsType>\n{\n    refreshProfile() {\n\n        let userId: number | null =  Number(this.props.match.params.userId);\n        if (!userId) {\n            userId = this.props.AuthUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\")\n            }\n        }\n        this.props.profileContent(userId);\n        this.props.getStatus(userId);\n    }\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n   \n\n    componentDidUpdate(prevProps: PropsType) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                isOwner={!this.props.match.params.userId}\n                saveProfile={this.props.saveProfile}\n            />\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n    AuthUserId: state.auth.userId,\n});\n\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\n\nlet setUserProfile = actions.setUserProfile\n\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, { setUserProfile, profileContent, getStatus, saveProfile }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer);"],"sourceRoot":""}