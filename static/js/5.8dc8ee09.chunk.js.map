{"version":3,"sources":["Dialogs/Dialogs.module.scss","Common/Components/hoc/withAuthRedirect.tsx","Dialogs/DialogItem/DialogsItem.tsx","Dialogs/Message/Message.tsx","Dialogs/Dialogs.tsx","Dialogs/AddMessageForm.tsx","Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","React","createElement","Redirect","to","DialogItem","path","id","className","styles","dialog","active","NavLink","name","Message","messages","message","maxLength","maxLengthCreator","minLength","minLengthCreator","Dialogs","reduxForm","form","onSubmit","handleSubmit","CreateFields","required","Textarea","button","dialogsPage","dialogs","map","key","style","textAlign","compose","_objectSpread","actions"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,YAAc,6BAA6B,SAAW,4B,iCCD5I,qEAMIC,EAA6B,SAACC,GAAmB,MAAM,CACvDC,OAAQD,EAAME,KAAKD,SAQVE,EAAmB,SAACC,GAU7B,OAFqCC,YAAQN,EAARM,EAPO,SAACC,GAErC,OAAKA,EAAML,OAEJM,IAAAC,cAACJ,EAAcE,GADfC,IAAAC,cAACC,IAAQ,CAACC,GAAI,gB,sGCDlBC,EARyB,SAACL,GACrC,IAAIM,EAAO,YAAcN,EAAMO,GAC/B,OACIN,IAAAC,cAAA,OAAKM,UAAWC,IAAOC,OAAS,IAAMD,IAAOE,QACzCV,IAAAC,cAACU,IAAO,CAACR,GAAIE,GAAQN,EAAMa,QCCxBC,EANsB,SAACd,GAClC,OAAOC,IAAAC,cAAA,OAAKM,UAAWC,IAAOM,UAC7Bf,EAAMgB,U,yBCAEC,EAAYC,YAAiB,IAC7BC,EAAYC,YAAiB,GA4C3BC,GADaC,YAA2B,CAAEC,KAAM,wBAAnCD,EC/CgD,SAACtB,GAC3E,OACEC,IAAAC,cAAA,QAAMsB,SAAUxB,EAAMyB,cACpBxB,IAAAC,cAAA,WACGwB,YAAwC,qBAAsB,iBAAkB,CAACC,IAAUV,EAAWE,GAAYS,MAErH3B,IAAAC,cAAA,OAAKM,UAAWC,IAAOoB,QACrB5B,IAAAC,cAAA,cAAQ,qBDeqB,SAACF,GACpC,IAAIN,EAAQM,EAAM8B,YACIpC,EAAMqC,QAAQC,KAAI,SAAAD,GAAO,OAAI9B,IAAAC,cAACG,EAAU,CAACQ,KAAOkB,EAAQlB,KAAMoB,IAAKF,EAAQxB,GAAIA,GAAIwB,EAAQxB,QAC1Fb,EAAMqB,SAASiB,KAAI,SAAAjB,GAAQ,OAAId,IAAAC,cAACY,EAAO,CAACE,QAASD,EAASC,QAASiB,IAAKlB,EAASR,GAAIA,GAAIQ,EAASR,QAOzH,OACEN,IAAAC,cAAA,OAAKM,UAAWC,IAAOsB,SAE3B9B,IAAAC,cAAA,MAAIgC,MAAO,CAACC,UAAW,WAAY,qB,wBE5BpBC,sBACbrC,aAToB,SAACL,GACrB,MAAO,CACLoC,YAAapC,EAAMoC,eAOEO,YAAA,GAAMC,MAC7BzC,IAFauC,CAGbf","file":"static/js/5.8dc8ee09.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1BW8H\",\"dialog\":\"Dialogs_dialog__8Y4Gp\",\"dialogsItem\":\"Dialogs_dialogsItem__2RshD\",\"messages\":\"Dialogs_messages__1IPEo\"};","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../Redux/reduxStore\";\n\n\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth,\n});\n\ntype PropsType = {\n    isAuth: boolean\n}\n\n\nexport const withAuthRedirect = (Component: any) => {\nconst RedirectComponent: React.FC<PropsType>  = (props) => {\n    \n            if (!props.isAuth) \n            return <Redirect to={\"/Login\"}/>\n            return <Component {...props}/>\n        \n    }\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from \"./../Dialogs.module.scss\";\n \n\ntype PropsType = {\n    id: string\n    name: string\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n    let path = \"/Dialogs/\" + props.id;\n    return (\n        <div className={styles.dialog + \" \" + styles.active}>\n            <NavLink to={path} >{props.name}</NavLink>\n        </div>\n    )\n}\nexport default DialogItem;","import React from \"react\";\nimport styles from \"./../Dialogs.module.scss\";\n\n\ntype PropsType = {\nmessage: string\nid: string\n}\n\nconst Message: React.FC<PropsType> = (props) => {\n    return <div className={styles.messages}>\n    {props.message}\n    </div>\n}\n\nexport default Message;","import React from \"react\";\nimport styles from \"./Dialogs.module.scss\";\nimport DialogItem from \"./DialogItem/DialogsItem\";\nimport Message from \"./Message/Message\";\nimport { reduxForm } from \"redux-form\";\nimport { maxLengthCreator, minLengthCreator } from \"../Common/Components/Validators/Validators\";\nimport { InitialStateType } from \"../Common/Components/Redux/dialogsReducer\";\nimport { AddMessageForm } from \"./AddMessageForm\";\n\n\n\nexport const maxLength = maxLengthCreator(50);\nexport const minLength = minLengthCreator(2);\n\n\n\ntype PropsType = {\n  dialogsPage: InitialStateType\n  sendMessage: (messageText: string) => void\n}\n\n\nexport type NewMessagesValuesKeysType = Extract <keyof NewMessagesType, string>\n\nexport type NewMessagesType = {\n  newMessageBody: string\n}\n\n\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n  let state = props.dialogsPage;\n  let dialogsElements = state.dialogs.map(dialogs => <DialogItem name= {dialogs.name} key={dialogs.id} id={dialogs.id} />);\n  let messagesElements = state.messages.map(messages => <Message message={messages.message} key={messages.id} id={messages.id} />);\n\n\n  let addNewMessage = (values: NewMessagesType) => {\n    props.sendMessage(values.newMessageBody);\n  };\n\n  return (\n    <div className={styles.dialogs}>\n\n<h1 style={{textAlign: \"center\"}} >Coming Soon...</h1>\n\n      {/* <div className={styles.dialogsItem}>\n        {dialogsElements}\n      </div>\n      <div className={styles.messages}>\n        <div>{messagesElements}</div>\n      </div>\n      <AddMessageFormRedux onSubmit={addNewMessage} /> */}\n    </div>\n  )\n}\nconst AddMessageFormRedux = reduxForm<NewMessagesType>({ form: \"dialogAddMessageForm\" })(AddMessageForm)\nexport default Dialogs;","import React from \"react\";\nimport styles from \"./Dialogs.module.scss\";\nimport { InjectedFormProps } from \"redux-form\";\nimport { required } from \"../Common/Components/Validators/Validators\";\nimport { Textarea } from \"../Common/Components/FormsControls/FormsControls\";\nimport { CreateFields } from \"../Common/Components/FormsControls/FormsControls\";\nimport { NewMessagesType, NewMessagesValuesKeysType, maxLength, minLength } from \"./Dialogs\";\n\nexport const AddMessageForm: React.FC<InjectedFormProps<NewMessagesType>> = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        {CreateFields<NewMessagesValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLength, minLength], Textarea)}\n      </div>\n      <div className={styles.button}>\n        <button>Send Message</button>\n      </div>\n    </form>\n  );\n};\n","import { actions } from \"../Common/Components/Redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../Common/Components/hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { AppStateType } from \"../Common/Components/Redux/reduxStore\";\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  }\n};\n\n\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {...actions }),\n  withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}